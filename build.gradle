plugins {
    id 'java'
    id 'jacoco'
    id 'application'
}

// Set project properties
group 'dod-c3pu'
version 'v0.1'
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.3'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:5.14.2'


    // https://mvnrepository.com/artifact/com.miglayout/miglayout-swing
    implementation 'com.miglayout:miglayout-swing:11.4.2'
    // https://mvnrepository.com/artifact/com.miglayout/miglayout-core
    implementation 'com.miglayout:miglayout-core:11.4.2'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    // implementation 'com.google.code.gson:gson:+'
    implementation 'com.google.code.gson:gson:2.10.1'

}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

application {
    application.mainClass.set('view.Main')
}

test {
    useJUnitPlatform()

    // testLogging {
    //     events "passed", "skipped", "failed"
    // }

    // testLogging.showStandardStreams = true

    finalizedBy('jacocoTestReport')
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED,
               TestLogEvent.SKIPPED,
               TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task generateExampleList {
    // Define the directory and output file
    def examplesDir = file('src/main/resources/examples')
    def outputFile = file('src/main/resources/examples/_example_list')

    // Declare the output file as a task output. Otherwise, Gradle is not aware
    // of it and does not include it in the jar file.
    outputs.file(outputFile)

    doLast {
        // Ensure the output directory exists
        if (!examplesDir.exists()) {
            examplesDir.mkdirs()
        }

        // Ensure the output file exists and is empty
        outputFile.text = ''

        // List files and write their names to the output file
        examplesDir.eachFile { File file ->
            if (file.isFile() && file.name.endsWith('.txt')) {
                outputFile.append(file.name + '\n')
            }
        }
    }

}

// Since the generateExampleList task generates a file in the resources directory,
// we need to ensure it is run before the resources are processed.
processResources.dependsOn generateExampleList

// Configure the jar task
jar {
    archiveBaseName.set('c3pu')
    archiveVersion.set(version)
    manifest {
        attributes 'Main-Class': 'view.Main',
        'Implementation-Title': archiveBaseName.get(),
        'Implementation-Version': archiveVersion.get()
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    // Include the output of the generateExampleList task
    from(generateExampleList)

    // Specify how to handle duplicate entries
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Ensure this task is run before the jar is built
jar.dependsOn(generateExampleList)